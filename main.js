/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t,e=function(){function t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.keys=[],this.keyMap=new Map,t.length&&this.add.apply(this,t),this.autoMode=!0,this.allowDefault=!1,this.processKeyup=this.processKeyup.bind(this),this.processKeydown=this.processKeydown.bind(this),document.addEventListener("keydown",this.processKeydown),document.addEventListener("keyup",this.processKeyup)}return t.prototype.close=function(){document.removeEventListener("keydown",this.processKeydown),document.removeEventListener("keyup",this.processKeyup)},t.prototype.update=function(t){this.keys.forEach((function(e){e.lastState=e.state,e.state>0&&(e.state+=t)}))},t.prototype.isDown=function(t){return this.getState(t).state>0},t.prototype.resetRepeating=function(t){var e=this.getState(t);e.state>0&&(e.state=.001)},t.prototype.isRepeating=function(t,e,n){var o=this.getState(t);return o.state>=e+n?(o.state-=n,!0):o.state&&!o.lastState},t.prototype.isUp=function(t){return!(this.getState(t).state>0)},t.prototype.justDown=function(t){var e=this.getState(t);return e.state>0&&0===e.lastState},t.prototype.justUp=function(t){var e=this.getState(t);return 0===e.state&&e.lastState>0},t.prototype.getState=function(t){var e=this.keyMap.get(t);if(!e){if(!this.autoMode)throw'Did not have key of value "'+t+'" in the Keyboard. Did you forget to add it via addKeys?';this.add(t),e=this.keyMap.get(t)}return e},t.prototype.add=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];e.forEach((function(e){if(!t.keyMap.has(e)){var n={code:e,lastState:0,state:0};t.keys.push(n),t.keyMap.set(e,n)}}))},t.prototype.remove=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];e.forEach((function(e){var n=t.keyMap.get(e);if(n){var o=t.keys.indexOf(n);-1!==o&&t.keys.splice(o),t.keyMap.delete(e)}}))},t.prototype.processKeydown=function(t){if(this.allowDefault||t.preventDefault(),!t.repeat){var e=this.keyMap.get(t.code);if(!e){if(!this.autoMode)return;this.add(t.code),e=this.keyMap.get(t.code)}e.state=.001}},t.prototype.processKeyup=function(t){var e=this.keyMap.get(t.code);if(!e){if(!this.autoMode)return;this.add(t.code),e=this.keyMap.get(t.code)}e.state=0},t}(),n=function(){function t(t,e){var n=t.context;this.mEffect=t,this.mDry=new GainNode(n),this.mDry.gain.value=0,this.mWet=new GainNode(n),this.mWet.gain.value=1,this.mInput=new GainNode(n),this.mOutput=new GainNode(n),this.mInput.connect(this.mDry),this.mInput.connect(this.mWet),this.mDry.connect(this.mOutput),this.mWet.connect(this.mEffect),this.mEffect.connect(this.mOutput),this.mOutput.connect(e||n.destination)}return Object.defineProperty(t.prototype,"effect",{get:function(){return this.mEffect},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"input",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"output",{get:function(){return this.mOutput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dry",{get:function(){return this.mDry.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wet",{get:function(){return this.mWet.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"postGain",{get:function(){return this.mOutput},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.disconnect(),this.mOutput.connect(t)},t.prototype.disconnect=function(){this.mOutput.disconnect()},t.prototype.setWetDry=function(t,e){if(void 0===e&&(e=0),t=Math.min(Math.max(t,0),1),e>0){var n=this.mEffect.context.currentTime+e;this.mDry.gain.linearRampToValueAtTime(1-t,n),this.mWet.gain.linearRampToValueAtTime(t,n)}else this.mDry.gain.value=1-t,this.mWet.gain.value=t},t.prototype.setWet=function(t,e){void 0===e&&(e=0),t=Math.max(t,0),e>0?this.mWet.gain.linearRampToValueAtTime(t,this.mEffect.context.currentTime+e):this.mWet.gain.value=t},t.prototype.setDry=function(t,e){void 0===e&&(e=0),t=Math.max(t,0),e>0?this.mDry.gain.linearRampToValueAtTime(t,this.mEffect.context.currentTime+e):this.mDry.gain.value=t},t.prototype.dispose=function(){this.mDry.disconnect(),this.mWet.disconnect(),this.mEffect.disconnect(),this.mInput.disconnect(),this.mOutput.disconnect(),this.mDry=null,this.mWet=null,this.mEffect=null,this.mInput=null,this.mOutput=null},t}(),o=function(){function t(t,e){this.mContext=t,this.mPreGain=new GainNode(t),this.mPostGain=new GainNode(t),this.mPreGain.connect(this.mPostGain),this.mPostGain.connect(e||t.destination),this.mEffects=[]}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mPreGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"output",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.output.disconnect(),this.output.connect(t)},Object.defineProperty(t.prototype,"context",{get:function(){return this.mPreGain.context},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mPreGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gain",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this.mEffects.length},enumerable:!1,configurable:!0}),t.prototype.pushEffect=function(t){var e=new n(t,this.output),o=0===this.mEffects.length?this.input:this.mEffects[this.mEffects.length-1].output;return o.disconnect(),o.connect(e.input),this.mEffects.push(e),e},t.prototype.push=function(t,e){var n=e?new t(this.context,e):new t(this.context);return this.pushEffect(n)},t.prototype.insertEffect=function(t,e){void 0===e&&(e=0);var o=new n(t),i=0===(e=0===this.mEffects.length?0:Math.min(Math.max(0,e),this.mEffects.length-1))?this.input:this.mEffects[e-1].output,r=e>=this.mEffects.length-1?this.output:this.mEffects[e].input;return i.disconnect(),i.connect(o.input),o.connect(r),this.mEffects.splice(e,0,o),o},t.prototype.insert=function(t,e,n){void 0===e&&(e=0);var o=n?new t(this.context,n):new t(this.context);return this.insertEffect(o,e)},t.prototype.remove=function(t){for(var e=0;e<this.mEffects.length;++e)if(this.mEffects[e].effect instanceof t){var n=this.mEffects[e],o=0===e?this.input:this.mEffects[e-1].output,i=e===this.mEffects.length-1?this.output:this.mEffects[e+1].input;return n.dispose(),o.disconnect(),o.connect(i),this.mEffects.splice(e,1),n}return null},t.prototype.get=function(t){return this.getNth(t,1)},t.prototype.getAllOf=function(t){return this.mEffects.filter((function(e){return e.effect instanceof t}))},t.prototype.getNth=function(t,e){for(var n=0;n<this.mEffects.length;++n)if(this.mEffects[n].effect instanceof t&&--e<=0)return this.mEffects[n];return null},t.prototype.dispose=function(){this.mPreGain.disconnect(),this.mPostGain.disconnect(),this.mEffects.forEach((function(t){return t.dispose()})),this.mPostGain=null,this.mPreGain=null,this.mEffects=null},t}(),i=function(){function t(t,e){this.mNode=t.createGain(),this.mTarget=e||null}return Object.defineProperty(t.prototype,"gain",{get:function(){return this.mNode.gain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"input",{get:function(){return this.mNode},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"target",{get:function(){return this.mTarget},set:function(t){this.mTarget=t,this.mNode.disconnect(),this.mNode.connect(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasTarget",{get:function(){return null!==this.mTarget},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.target=t},t.prototype.disconnect=function(){this.mNode.disconnect(),this.mTarget=null},t}(),r=function(){function t(t){this.mContext=t,this.mSends=[],this.mInput=new GainNode(t)}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mInput},enumerable:!1,configurable:!0}),t.prototype.create=function(t){var e=new i(this.mContext,t);return this.mInput.connect(e.input),this.mSends.push(e),e},t.prototype.get=function(t){return"number"==typeof t?this.mSends[t]||null:this.mSends.find((function(e){return Object.is(e.target,t)}))||null},t.prototype.remove=function(t){for(var e=0;e<this.mSends.length;++e)if(Object.is(this.mSends[e],t))return this.cleanSend(t),this.mSends.splice(e,1),!0;return!1},t.prototype.removeAll=function(){var t=this;this.mSends.forEach((function(e){return t.cleanSend(e)})),this.mSends=[]},t.prototype.dispose=function(){this.removeAll()},Object.defineProperty(t.prototype,"length",{get:function(){return this.mSends.length},enumerable:!1,configurable:!0}),t.prototype.removeIfTargeting=function(t){for(var e=0;e<this.mSends.length;)Object.is(this.mSends[e].target,t)?(this.cleanSend(this.mSends[e]),this.mSends.splice(e,1)):++e},t.prototype.cleanSend=function(t){t.disconnect(),this.mInput.disconnect(t.input)},t}(),s=function(){function t(t,e){this.mPanner=t.createStereoPanner(),this.mPostGain=t.createGain(),this.mPanner.connect(this.mPostGain),this.mPostGain.connect(e||t.destination),this.mEffects=new o(t,this.mPanner),this.mSends=new r(t),this.mPostGain.connect(this.mSends.input)}return Object.defineProperty(t.prototype,"input",{get:function(){return this.mEffects.input},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"effects",{get:function(){return this.mEffects},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"preGain",{get:function(){return this.mEffects.preGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"postGain",{get:function(){return this.mPostGain},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"panner",{get:function(){return this.mPanner},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sends",{get:function(){return this.mSends},enumerable:!1,configurable:!0}),t.prototype.connect=function(t){this.mPostGain.disconnect(),this.mPostGain.connect(this.mSends.input),this.mPostGain.connect(t)},t.prototype.disconnect=function(){this.mPostGain.disconnect(),this.mPostGain.connect(this.mSends.input)},t.prototype.dispose=function(){this.mPanner.disconnect(),this.mPostGain.disconnect(),this.mEffects.dispose(),this.mSends.dispose(),this.mPanner=null,this.mPostGain=null,this.mEffects=null,this.mSends=null},t}(),c=function(){function t(t,e){this.mContext=t,this.mMasterBus=new s(t,e),this.mBusses=new Map,this.mBusses.set("master",this.mMasterBus)}return Object.defineProperty(t.prototype,"context",{get:function(){return this.mContext},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"master",{get:function(){return this.mMasterBus},enumerable:!1,configurable:!0}),t.prototype.create=function(t,e){if(this.mBusses.has(t))return null;var n=new s(this.context,e||this.mMasterBus.input);return this.mBusses.set(t,n),n},t.prototype.get=function(t){return this.mBusses.get(t)||null},t.prototype.remove=function(t){return this.mBusses.get(t),this.mBusses.delete(t)},t.prototype.dispose=function(){this.mBusses.forEach((function(t){return t.dispose()})),this.mBusses.clear(),this.mBusses=null,this.mMasterBus=null},t}(),u="pointerdown",a=function(){function t(t,e,n){this.mEffects=new o(t,n),this.mSound=e,this.mSound&&this.mSound.connect(this.mEffects.input)}return Object.defineProperty(t.prototype,"effects",{get:function(){return this.mEffects},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.mEffects.context},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"source",{get:function(){return this.mSound},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"gain",{get:function(){return this.mEffects.gain.gain},enumerable:!1,configurable:!0}),t.prototype.dispose=function(){var t;null===(t=this.mSound)||void 0===t||t.disconnect(),this.mSound=null,this.mEffects.dispose(),this.mEffects=null},t.prototype.connect=function(t){this.mEffects.connect(t)},t}(),h=function(){function t(t,e){this.mContext=t,this.mTargets=[],e?this.set(e):(this.mAttackTime=0,this.mAttackLevel=1,this.mDecayTime=.5,this.mSustainLevel=.25,this.mHoldTime=.25,this.mReleaseTime=.5)}return Object.defineProperty(t.prototype,"attackTime",{get:function(){return this.mAttackTime},set:function(t){this.mAttackTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attackLevel",{get:function(){return this.mAttackLevel},set:function(t){this.mAttackLevel=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"decayTime",{get:function(){return this.mDecayTime},set:function(t){this.mDecayTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"sustainLevel",{get:function(){return this.mSustainLevel},set:function(t){this.mSustainLevel=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"holdTime",{get:function(){return this.mHoldTime},set:function(t){this.mHoldTime=Math.max(0,t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"releaseTime",{get:function(){return this.mReleaseTime},set:function(t){this.mReleaseTime=Math.max(0,t)},enumerable:!1,configurable:!0}),t.prototype.addTarget=function(t){this.mTargets.push(t)},t.prototype.removeTarget=function(t){for(var e=0;e<this.mTargets.length;++e)if(Object.is(this.mTargets[e],t)){this.mTargets.splice(e,1);break}},t.prototype.set=function(t){var e,n,o,i,r,s;this.mAttackTime=null!==(e=t.attackTime)&&void 0!==e?e:this.mAttackTime,this.mAttackLevel=null!==(n=t.attackLevel)&&void 0!==n?n:this.mAttackLevel,this.mDecayTime=null!==(o=t.decayTime)&&void 0!==o?o:this.mDecayTime,this.mSustainLevel=null!==(i=t.sustainLevel)&&void 0!==i?i:this.mSustainLevel,this.mHoldTime=null!==(r=t.holdTime)&&void 0!==r?r:this.mHoldTime,this.mReleaseTime=null!==(s=t.releaseTime)&&void 0!==s?s:this.mReleaseTime},t.prototype.activate=function(t){var e=this;void 0===t&&(t=0);var n=this.mContext.currentTime+t+.02,o=n+this.mAttackTime,i=n+this.mAttackTime+this.mDecayTime+this.mHoldTime;this.mTargets.forEach((function(t){t.cancelScheduledValues(n),t.linearRampToValueAtTime(0,n),t.setTargetAtTime(e.mAttackLevel,n,.1*e.mAttackTime),t.setTargetAtTime(e.mSustainLevel,o,.1*e.mDecayTime),t.setTargetAtTime(0,i,.1*e.mReleaseTime)}))},t.prototype.cancel=function(t){var e=this;void 0===t&&(t=0),this.mTargets.forEach((function(n){n.cancelScheduledValues(e.mContext.currentTime+t)}))},t}(),l=(t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),p=function(t){function e(e,n,o){var i=this,r=o?new OscillatorNode(e,o):new OscillatorNode(e);return(i=t.call(this,e,r,n)||this).envelope=new h(e),i.envelope.addTarget(i.gain),i.gain.value=0,i.source.start(e.currentTime),i}return l(e,t),Object.defineProperty(e.prototype,"type",{get:function(){return this.source.type},set:function(t){this.source.type=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"frequency",{get:function(){return this.source.frequency},enumerable:!1,configurable:!0}),e.prototype.load=function(t){throw"Synth#load should not be called!"},e.prototype.play=function(t){return void 0===t&&(t=0),this.envelope.activate(t),this.source},e.prototype.unload=function(){throw"Synth#unload should not be called!"},e}(a),f=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),d=function(t){function e(e,n,o){var i=new MediaElementAudioSourceNode(e,{mediaElement:o?new Audio(o):new Audio});return t.call(this,e,i,n)||this}return f(e,t),e.prototype.load=function(t){return this.source.mediaElement.src=t,this.source.mediaElement.load(),!0},e.prototype.unload=function(){this.source.mediaElement.src=""},e.prototype.play=function(){return t=this,e=void 0,o=function(){var t=this;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,c[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&c[0]?o.return:c[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,c[1])).done)return i;switch(o=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,o=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){s.label=c[1];break}if(6===c[0]&&s.label<i[1]){s.label=i[1],i=c;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(c);break}i[2]&&s.ops.pop(),s.trys.pop();continue}c=e.call(t,s)}catch(t){c=[6,t],o=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(e){return[2,this.source.mediaElement.play().then((function(){return t.source})).catch((function(){return null}))]}))},new((n=void 0)||(n=Promise))((function(i,r){function s(t){try{u(o.next(t))}catch(t){r(t)}}function c(t){try{u(o.throw(t))}catch(t){r(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,c)}u((o=o.apply(t,e||[])).next())}));var t,e,n,o},e.prototype.stop=function(){this.source.mediaElement.pause(),this.source.mediaElement.currentTime=0},e.prototype.setPause=function(t){t?this.source.mediaElement.pause():this.source.mediaElement.play()},Object.defineProperty(e.prototype,"paused",{get:function(){return this.source.mediaElement.paused},enumerable:!1,configurable:!0}),e.prototype.dispose=function(){this.source.mediaElement.src="",t.prototype.dispose.call(this)},e}(a),m=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},y=function(){function t(){this.callbacks=[]}return t.prototype.addListener=function(t,e){void 0===e&&(e=null),this.callbacks.push({context:e,callback:t})},t.prototype.removeListener=function(t,e){void 0===e&&(e=null);for(var n=0;n<this.callbacks.length;++n)if(Object.is(this.callbacks[n].callback,t)&&(!e||Object.is(this.callbacks[n].context,e)))return this.callbacks.splice(n,1),!0;return!1},t.prototype.invoke=function(){for(var t,e,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];for(var i=0;i<this.callbacks.length;++i)this.callbacks[i].context?(t=this.callbacks[i].callback).call.apply(t,m([this.callbacks[i].context],n,!1)):(e=this.callbacks[i]).callback.apply(e,n)},Object.defineProperty(t.prototype,"length",{get:function(){return this.callbacks.length},enumerable:!1,configurable:!0}),t.prototype.clear=function(){this.callbacks=[]},t}();function g(t,e){return n=this,o=void 0,r=function(){var n;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,c[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&c[0]?o.return:c[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,c[1])).done)return i;switch(o=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,o=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){s.label=c[1];break}if(6===c[0]&&s.label<i[1]){s.label=i[1],i=c;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(c);break}i[2]&&s.ops.pop(),s.trys.pop();continue}c=e.call(t,s)}catch(t){c=[6,t],o=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(o){switch(o.label){case 0:return[4,fetch(e)];case 1:return[4,o.sent().arrayBuffer()];case 2:return n=o.sent(),[2,t.decodeAudioData(n)]}}))},new((i=void 0)||(i=Promise))((function(t,e){function s(t){try{u(r.next(t))}catch(t){e(t)}}function c(t){try{u(r.throw(t))}catch(t){e(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof i?n:new i((function(t){t(n)}))).then(s,c)}u((r=r.apply(n,o||[])).next())}));var n,o,i,r}var v,b=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),w=function(t){function e(e,n,o){var i=t.call(this,e,null,n)||this;return i.defaults={buffer:null,loop:!1,playbackRate:1,detune:0,loopStart:0,loopEnd:0},i.onended=new y,i.onendedHandler=i.onendedHandler.bind(i),o&&i.load(o),i}return b(e,t),Object.defineProperty(e.prototype,"isLoaded",{get:function(){return null!==this.defaults.buffer},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"looping",{get:function(){return this.defaults.loop},set:function(t){this.defaults.loop=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loopStart",{get:function(){return this.defaults.loopStart},set:function(t){this.defaults.loopStart=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loopEnd",{get:function(){return this.defaults.loopEnd},set:function(t){this.defaults.loopEnd=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"playbackRate",{get:function(){return this.defaults.playbackRate},set:function(t){this.defaults.playbackRate=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"detune",{get:function(){return this.defaults.detune},set:function(t){this.defaults.detune=t},enumerable:!1,configurable:!0}),e.prototype.load=function(t){return e=this,n=void 0,i=function(){var e=this;return function(t,e){var n,o,i,r,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return r={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function c(c){return function(u){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,c[0]&&(s=0)),s;)try{if(n=1,o&&(i=2&c[0]?o.return:c[0]?o.throw||((i=o.return)&&i.call(o),0):o.next)&&!(i=i.call(o,c[1])).done)return i;switch(o=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return s.label++,{value:c[1],done:!1};case 5:s.label++,o=c[1],c=[0];continue;case 7:c=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){s=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){s.label=c[1];break}if(6===c[0]&&s.label<i[1]){s.label=i[1],i=c;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(c);break}i[2]&&s.ops.pop(),s.trys.pop();continue}c=e.call(t,s)}catch(t){c=[6,t],o=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}}(this,(function(n){return[2,g(this.context,t).then((function(t){return e.defaults.buffer=t,!0})).catch((function(t){return console.error(t),!1}))]}))},new((o=void 0)||(o=Promise))((function(t,r){function s(t){try{u(i.next(t))}catch(t){r(t)}}function c(t){try{u(i.throw(t))}catch(t){r(t)}}function u(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(t){t(n)}))).then(s,c)}u((i=i.apply(e,n||[])).next())}));var e,n,o,i},e.prototype.onendedHandler=function(t){this.onended.invoke(t.target,this)},e.prototype.unload=function(){this.defaults.buffer=null},e.prototype.play=function(t,e,n){void 0===t&&(t=0),void 0===e&&(e=0);var o=this.defaults?new AudioBufferSourceNode(this.context,this.defaults):new AudioBufferSourceNode(this.context);return o.connect(this.effects.input),o.onended=this.onendedHandler,void 0===n?o.start(this.context.currentTime+t,e):o.start(this.context.currentTime+t,e,n),o},e}(a),P=function(){function t(){this.mContext=null,this.mBusses=null,this.mSounds=new Map,this.mMusic=new Map,this.mSynths=new Map}return Object.defineProperty(t.prototype,"listener",{get:function(){return this.mContext.listener},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"busses",{get:function(){return this.mBusses},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"context",{get:function(){return this.mContext},enumerable:!1,configurable:!0}),t.prototype.getSound=function(t){return this.mSounds.get(t)||null},t.prototype.getMusic=function(t){return this.mMusic.get(t)||null},t.prototype.getSynth=function(t){return this.mSynths.get(t)||null},t.prototype.loadSound=function(t,e){var n=this.mSounds.get(t);if(!n){var o=e?this.mBusses.get(e):this.mBusses.master;o||(o=this.mBusses.master),n=new w(this.context,o.input),this.mSounds.set(t,n),n.load(t).then((function(){return n})).catch((function(){return null}))}return n},t.prototype.loadMusic=function(t,e){var n=this.mMusic.get(t);if(!n){var o=e?this.mBusses.get(e):this.mBusses.master;o||(o=this.mBusses.master),n=new d(this.context,o.input),this.mMusic.set(t,n),n.load(t)}return n},t.prototype.loadSynth=function(t,e,n){void 0===e&&(e="master");var o=this.mSynths.get(t);if(!o){var i=this.mBusses.get(e);o=new p(this.context,i.input,n),this.mSynths.set(t,o)}return o},t.prototype.wasInit=function(){return null!==this.mContext},t.prototype.init=function(){var t=null;try{t=new(window.AudioContext||window.webkitAudioContext)}catch(t){return console.error("AudioContext is not supported in this browser."),!1}return function(t){"running"!==t.state&&window.addEventListener(u,(function e(){t.resume().then((function(){console.log("Resumed AudioContext."),window.removeEventListener(u,e)})).catch((function(t){console.log("Failed to resume AudioContext:",t)}))}))}(t),this.mBusses=new c(t),this.mContext=t,!0},t.prototype.dispose=function(){this.mBusses.dispose(),this.mMusic.forEach((function(t){return t.dispose()})),this.mMusic.clear(),this.mMusic=null,this.mSounds.forEach((function(t){return t.dispose()})),this.mSounds.clear(),this.mSounds=null,this.mSynths.forEach((function(t){return t.dispose()})),this.mSynths.clear(),this.mSynths=null,this.mContext=null},t}(),k={tickSpeed:33.34},x=function(){function t(t){var n;void 0===t&&(t=k),this.mTickSpeed=null!==(n=t.tickSpeed)&&void 0!==n?n:k.tickSpeed,this.mKeyboard=new e,this.mAudio=new P}return Object.defineProperty(t.prototype,"keyboard",{get:function(){return this.mKeyboard},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"audio",{get:function(){return this.mAudio},enumerable:!1,configurable:!0}),t.prototype.quit=function(){this.mIsRunning=!1},Object.defineProperty(t.prototype,"isRunning",{get:function(){return this.mIsRunning},enumerable:!1,configurable:!0}),t.prototype.run=function(){var t=this;this.mIsRunning=this.initialize(),this.mLastTicks=performance.now(),this.render(),this.mInterval=setInterval((function(){return t.runOneFrame()}),this.mTickSpeed)},t.prototype.runOneFrame=function(){if(this.isRunning){var t=performance.now(),e=t-this.mLastTicks;this.processInput(),this.update(e),this.render(),this.keyboard.update(e),this.mLastTicks=t}else clearInterval(this.mInterval)},t.prototype.processInput=function(){},t}(),E=function(){function t(t,e,n){this.grid=n?new Uint32Array(n):new Uint32Array(t*e),this.rowCount=t,this.colCount=e,n&&console.assert(n.length===t*e)}return t.prototype.reset=function(){for(var t=0;t<this.grid.length;++t)this.grid[t]=0},t.prototype.getWidth=function(t){return void 0===t&&(t=0),t%2==0?this.colCount:this.rowCount},t.prototype.getHeight=function(t){return void 0===t&&(t=0),t%2==0?this.rowCount:this.colCount},t.prototype.mergeInto=function(t,e,n,o){void 0===o&&(o=0);for(var i=n.getHeight(o),r=n.getWidth(o),s=0;s<i;++s)for(var c=0;c<r;++c){var u=n.get(s,c,o);0!==u&&this.set(s+t,c+e,u)}},t.prototype.leftMost=function(t){void 0===t&&(t=0);for(var e=t%2==0?this.rowCount:this.colCount,n=t%2==0?this.colCount:this.rowCount,o=0;o<n;++o)for(var i=0;i<e;++i)if(this.get(i,o,t))return o;return-1},t.prototype.rightMost=function(t){void 0===t&&(t=0);for(var e=t%2==0?this.rowCount:this.colCount,n=(t%2==0?this.colCount:this.rowCount)-1;n>=0;--n)for(var o=0;o<e;++o)if(this.get(o,n,t))return n;return-1},t.prototype.topMost=function(t){void 0===t&&(t=0);for(var e=t%2==0?this.rowCount:this.colCount,n=t%2==0?this.colCount:this.rowCount,o=0;o<e;++o)for(var i=0;i<n;++i)if(this.get(o,i,t))return o;return-1},t.prototype.bottomMost=function(t){void 0===t&&(t=0);for(var e=t%2==0?this.rowCount:this.colCount,n=t%2==0?this.colCount:this.rowCount,o=e-1;o>=0;--o)for(var i=0;i<n;++i)if(this.get(o,i,t))return o;return-1},t.prototype.intersects=function(t,e,n,o,i){void 0===e&&(e=0),void 0===n&&(n=0),void 0===o&&(o=0),void 0===i&&(i=0);for(var r=o%2==0?this.rowCount:this.colCount,s=o%2==0?this.colCount:this.rowCount,c=0;c<r&&!(c+e>=t.rowCount);++c)if(!(c+e<0))for(var u=0;u<s&&!(u+n>=t.colCount);++u)if(!(u+n<0)&&0!==this.get(c,u,o)&&0!==t.get(c+e,u+n,i))return!0;return!1},t.prototype.createRotated=function(e){if(0===e)return new t(this.rowCount,this.colCount,this.grid);for(var n=new Array(this.rowCount*this.colCount),o=e%2==0?this.rowCount:this.colCount,i=e%2==0?this.colCount:this.rowCount,r=0,s=0;s<o;++s)for(var c=0;c<i;++c)n[r]=this.get(s,c,e),++r;return new t(o,i,n)},t.prototype.get=function(t,e,n){switch(void 0===n&&(n=0),n=Math.floor(n)%4){case 0:return this.grid[t*this.colCount+e];case 1:return this.grid[(this.rowCount-1-e)*this.colCount+t];case 2:return this.grid[(this.rowCount-1-t)*this.colCount+(this.colCount-1-e)];case 3:return this.grid[e*this.colCount+this.colCount-1-t]}},t.prototype.set=function(t,e,n){return this.grid[this.gridToIndex(t,e)]=n,this},t.prototype.isFreeAt=function(t,e){return 0===this.get(t,e)},t.prototype.gridToIndex=function(t,e){return this.clampIndex(t*this.colCount+e)},t.prototype.clampIndex=function(t){return Math.max(Math.min(t,this.rowCount*this.colCount-1),0)},t.prototype.toString=function(t){void 0===t&&(t=0);for(var e="",n=0;n<this.rowCount;++n){for(var o=0;o<this.colCount;++o)e+=this.get(n,o,t),n===this.rowCount-1&&o===this.colCount-1||(e+=", ");e+="\n"}return e},t}();!function(t){t[t.Chrome=0]="Chrome",t[t.IExplorer=1]="IExplorer",t[t.FireFox=2]="FireFox",t[t.Safari=3]="Safari",t[t.Brave=4]="Brave",t[t.Unknown=5]="Unknown"}(v||(v={}));var C,S,O,T,R,j,M=(C=navigator.userAgent,S=C.indexOf("Chrome")>-1,O=C.indexOf("MSIE")>-1||C.indexOf("rv:")>-1,T=C.indexOf("Firefox")>-1,R=C.indexOf("Safari")>-1&&!S,j=void 0!==navigator.brave,function(t){switch(t){case v.Brave:return j;case v.Chrome:return S;case v.FireFox:return T;case v.Safari:return R;case v.IExplorer:return O}return!1}),A={None:{color:"#ffffff00",id:0,piece:null},Stick:{color:"skyblue",id:1,piece:new E(4,4,[0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0])},L:{color:"orange",id:2,piece:new E(3,3,[0,0,0,2,2,2,2,0,0])},RevL:{color:"blue",id:3,piece:new E(3,3,[0,0,0,3,3,3,0,0,3])},StepR:{color:"red",id:4,piece:new E(3,3,[0,0,0,0,4,4,4,4,0])},StepL:{color:"green",id:5,piece:new E(3,3,[0,0,0,5,5,0,0,5,5])},T:{color:"purple",id:6,piece:new E(3,3,[0,6,0,6,6,6,0,0,0])},Box:{color:"gray",id:7,piece:new E(2,2,[7,7,7,7])}};function L(){return A[(7,Math.floor(7*Math.random())+1)].piece}var B=getComputedStyle(document.documentElement);Object.keys(A).forEach((function(t){var e=A[t];A[e.id]=e,e.color=B.getPropertyValue("--block-color-"+e.id)})),Object.freeze(A),Object.seal(A);var I=function(){function t(t,e){this.startSpeed=1e3,this.maxSpeed=50,this.grid=t,this.speed=this.startSpeed,this.isPaused=!1,this.getNextPiece=e,this.displayShadow=!0,this.pressure=0,this.maxPressure=200,this.underPressure=!1,this.onPieceConnect=new y,this.onLineClear=new y,this.onLose=new y,this.onReset=new y,this.onMove=new y,this.reset()}return t.prototype.applyTransformation=function(){this.moveRelCol=Math.floor(this.moveRelCol),this.moveRelRow=Math.floor(this.moveRelRow);var t=-1===this.nextAngle?this.angle:this.nextAngle;if(0!==this.moveRelCol){for(var e=Math.sign(this.moveRelCol),n=this.moveRelCol;0!==n&&(n<0&&this.outboundsLeft(this.col+n,t)||n>0&&this.outboundsRight(this.col+n,t)||this.piece.intersects(this.grid,this.row,this.col+n,t));)n-=e;this.moveRelCol=n}if(0!==this.moveRelRow){e=Math.sign(this.moveRelRow);for(var o=this.moveRelRow;0!==o&&(o>0&&this.outboundsDown(this.row+o,t)||this.piece.intersects(this.grid,this.row+o,this.col+this.moveRelCol,t));)o>0&&(this.underPressure=!0),o-=e;this.moveRelRow=o}this.moveRelCol+=this.applyAngle(this.row+this.moveRelRow,this.col+this.moveRelCol),this.moveRelRow+=this.constrictBoundsRows(this.row+this.moveRelRow,this.angle),this.moveRelCol+=this.constrictBoundsCols(this.col+this.moveRelCol,this.angle,this.moveRelCol<0,this.moveRelCol>0),this.row+=this.moveRelRow,this.col+=this.moveRelCol,this.piece.intersects(this.grid,this.row+1,this.col,this.angle)||this.outboundsDown(this.row+1,this.angle)||(this.underPressure=!1,this.pressure=0),this.onMove.invoke(this.moveRelRow,this.moveRelCol),this.moveRelRow=0,this.moveRelCol=0,this.nextAngle=-1},t.prototype.update=function(t){this.isPaused||(this.counter-=t,this.applyTransformation(),this.underPressure&&(this.pressure+=t,this.pressure>=this.maxPressure&&this.connectToBoard()),this.counter<=0&&(this.counter+=this.speed,this.moveDownOne()))},t.prototype.resetCounter=function(){this.counter=this.speed},t.prototype.connectToBoard=function(){var t=this;this.grid.mergeInto(this.row,this.col,this.piece,this.angle);var e=this.grid.processFullRows();if(e.length>0){var n=document.getElementById("grid").children;e.forEach((function(e){for(var o=0;o<t.grid.getWidth();++o){var i=n[e*t.grid.getWidth()+o];i.classList.remove("row-clear"),i.classList.add("row-clear")}})),this.onLineClear.invoke(e)}this.row<-this.piece.topMost(this.angle)&&(this.grid.loseAnim(),this.isPaused=!0,this.onLose.invoke()),this.onPieceConnect.invoke(this),this.reset()},t.prototype.moveDownOne=function(){0===this.moveRelRow&&this.move(1,0)},t.prototype.move=function(t,e){this.moveRelRow+=t,this.moveRelCol+=e},t.prototype.immediateDrop=function(){for(var t=1,e=this.piece.bottomMost(this.angle);!this.piece.intersects(this.grid,t+this.row,this.col,this.angle)&&t+this.row<this.grid.getHeight()-e;)++t;return this.moveRelRow=0,this.moveRelCol=0,this.nextAngle=-1,this.move(t-1,0),this.applyTransformation(),this.connectToBoard(),this.counter=this.speed,t},t.prototype.getTileEls=function(){for(var t=[],e=document.getElementById("grid").children,n=this.grid.getWidth(),o=this.grid.getHeight(),i=this.piece.getWidth(this.angle),r=this.piece.getHeight(this.angle),s=0;s<r;++s)for(var c=0;c<i;++c){var u=s+this.row,a=c+this.col;a>=n||a<0||u>=o||u<0||this.piece.get(s,c,this.angle)&&t.push(e[u*n+a])}return t},t.prototype.constrictBoundsRows=function(t,e){return Math.min(t,this.grid.getHeight()-1-this.piece.bottomMost(e))-t},t.prototype.constrictBoundsCols=function(t,e,n,o){void 0===n&&(n=!0),void 0===o&&(o=!0);var i=t;return n&&(i=Math.max(t,-this.piece.leftMost(e))),o&&(i=Math.min(t,this.grid.getWidth()-1-this.piece.rightMost(e))),i-t},t.prototype.outboundsLeft=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),t<-this.piece.leftMost(e)},t.prototype.outboundsRight=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),t>this.grid.getWidth()-1-this.piece.rightMost(e)},t.prototype.outboundsDown=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),t>this.grid.getHeight()-1-this.piece.bottomMost(e)},t.prototype.outboundsTop=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=0),this.row+t<-this.piece.topMost(e)},t.prototype.restart=function(){this.reset(),this.speed=this.startSpeed},t.prototype.reset=function(t){t||(t=this.getNextPiece());for(var e=-t.topMost(),n=Math.round((this.grid.colCount-t.colCount)/2);t.intersects(this.grid,e,n);)--e;this.row=e,this.col=n,this.moveRelRow=0,this.moveRelCol=0,this.nextAngle=-1,this.pressure=0,this.underPressure=!1,this.isPaused=!1,this.angle=0,this.counter=this.speed,this.piece=t,this.onReset.invoke()},t.prototype.applyAngle=function(t,e){if(-1===this.nextAngle)return 0;var n=this.nextAngle;if(!(this.piece.intersects(this.grid,t,e,n,0)||this.outboundsLeft(e,n)||this.outboundsRight(e,n)||this.outboundsDown(t,n)))return this.angle=n,0;for(var o=1;o<3;++o){if(!(this.piece.intersects(this.grid,t,e+o,n,0)||this.outboundsLeft(e+o,n)||this.outboundsRight(e+o,n)||this.outboundsDown(t+o,n)))return this.angle=n,o;if(!(this.piece.intersects(this.grid,t,e-o,n,0)||this.outboundsLeft(e-o,n)||this.outboundsRight(e-o,n)||this.outboundsDown(t-o,n)))return this.angle=n,-o}return 0},t.prototype.rotate=function(t){this.nextAngle=(t%4+4)%4},t.prototype.willCollide=function(t,e,n){return void 0===t&&(t=1),void 0===e&&(e=0),this.piece.intersects(this.grid,this.row+t,this.col+e,void 0===n?this.angle:n,0)},t.prototype.canRotateAt=function(t,e,n){return this.piece.leftMost(n),!1},t.prototype.render=function(t){var e=0;if(this.displayShadow){for(e=1;!this.piece.intersects(this.grid,this.row+e,this.col,this.angle)&&!this.outboundsDown(this.row+e,this.angle);)++e;--e}for(var n=0;n<this.piece.rowCount;++n)for(var o=0;o<this.piece.colCount;++o){var i=this.piece.get(n,o,this.angle);if(0!==i){if(0!==e){var r=t[(n+this.row+e)*this.grid.colCount+o+this.col];r?(r.style.border=".5vmin "+A[i].color+" dashed",r.style.opacity=".6",r.style.background="rgba(0, 0, 0, .1)"):console.warn("Actor.render: shadowTile was undefined.")}if(n+this.row>=this.grid.rowCount||n+this.row<0)continue;if(o+this.col>=this.grid.colCount||o+this.col<0)continue;var s=t[(n+this.row)*this.grid.colCount+o+this.col];s?(s.style.background=A[i].color,s.style.boxShadow="-.5vmin 1vmin .5vmin .5vmin rgba(0, 0, 0, 0.1)",s.style.opacity="1",s.style.border=""):console.warn("tile missing!")}}},t}(),D=function(t,e,n){if(n||2===arguments.length)for(var o,i=0,r=e.length;i<r;i++)!o&&i in e||(o||(o=Array.prototype.slice.call(e,0,i)),o[i]=e[i]);return t.concat(o||Array.prototype.slice.call(e))},G=function(){function t(){this.callbacks=[]}return t.prototype.addListener=function(t,e){void 0===e&&(e=null),this.callbacks.push({context:e,callback:t})},t.prototype.removeListener=function(t,e){void 0===e&&(e=null);for(var n=0;n<this.callbacks.length;++n)if(Object.is(this.callbacks[n].callback,t)&&(!e||Object.is(this.callbacks[n].context,e)))return this.callbacks.splice(n,1),!0;return!1},t.prototype.invoke=function(){for(var t,e,n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];for(var i=0;i<this.callbacks.length;++i)this.callbacks[i].context?(t=this.callbacks[i].callback).call.apply(t,D([this.callbacks[i].context],n,!1)):(e=this.callbacks[i]).callback.apply(e,n)},Object.defineProperty(t.prototype,"length",{get:function(){return this.callbacks.length},enumerable:!1,configurable:!0}),t.prototype.clear=function(){this.callbacks=[]},t}(),_=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),N=function(t){function e(e,n){var o=t.call(this,e,n)||this;return o.onAnimEnd=new G,o}return _(e,t),e.prototype.loseAnim=function(){var t=this,e=document.getElementById("grid").children,n=0;if(M(v.Safari))var o=setInterval((function(){for(var e=0;e<t.getWidth();++e)t.grid[n*t.getWidth()+e]=8;++n>=t.getHeight()&&(clearInterval(o),t.onAnimEnd.invoke("lose"))}),50);else var i=setInterval((function(){t.grid[n]=8,e[n].classList.add("small-grow"),++n>=t.grid.length&&(clearInterval(i),t.onAnimEnd.invoke("lose"))}),16.67)},e.prototype.processFullRows=function(){for(var t=this,e=[],n=0;n<this.getHeight();++n){for(var o=!0,i=0;i<this.getWidth();++i)if(0===this.get(n,i)){o=!1;break}o&&e.push(n)}return setTimeout((function(){e.forEach((function(e){var n=t.getWidth();0!==e&&t.grid.copyWithin(n,0,e*n);for(var o=0;o<n;++o)t.grid[o]=0})),t.onAnimEnd.invoke("line-clear")}),300),e},e}(E);function W(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)t[o]=n[o]}return t}var H,K,F,U,V,z,q,Q,J,X,Y,Z,$,tt,et=function t(e,n){function o(t,o,i){if("undefined"!=typeof document){"number"==typeof(i=W({},n,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),t=encodeURIComponent(t).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var r="";for(var s in i)i[s]&&(r+="; "+s,!0!==i[s]&&(r+="="+i[s].split(";")[0]));return document.cookie=t+"="+e.write(o,t)+r}}return Object.create({set:o,get:function(t){if("undefined"!=typeof document&&(!arguments.length||t)){for(var n=document.cookie?document.cookie.split("; "):[],o={},i=0;i<n.length;i++){var r=n[i].split("="),s=r.slice(1).join("=");try{var c=decodeURIComponent(r[0]);if(o[c]=e.read(s,c),t===c)break}catch(t){}}return t?o[t]:o}},remove:function(t,e){o(t,"",W({},e,{expires:-1}))},withAttributes:function(e){return t(this.converter,W({},this.attributes,e))},withConverter:function(e){return t(W({},this.converter,e),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(e)}})}({read:function(t){return'"'===t[0]&&(t=t.slice(1,-1)),t.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(t){return encodeURIComponent(t).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"}),nt=function(){function t(){this.load()}return t.prototype.load=function(){var t;for(this.data=void 0===(t=et.get("tetris-highscore"))?new Array(0):JSON.parse(t);this.data.length<10;)this.data.push({score:0,name:""});this.sort()},t.prototype.save=function(){var t;this.sort(),t=this.data,et.set("tetris-highscore",JSON.stringify(t),{expires:365})},t.prototype.scoreQualifies=function(t){var e;for(e=0;e<this.data.length&&!(t<this.data[e].score);++e);return e-1},t.prototype.insertScore=function(t,e,n){this.data.splice(n,0,{score:t,name:e}),this.data.shift()},Object.defineProperty(t.prototype,"scores",{get:function(){return this.data},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"highestScore",{get:function(){return 0===this.data.length?0:this.data[this.data.length-1].score},enumerable:!1,configurable:!0}),t.prototype.show=function(){var t=document.getElementById("highscore-text");t.classList.add("show");for(var e="",n=0;n<this.data.length;++n)e+="\n            <p>".concat(this.data[n].name,' <span class="highscore-score">').concat(this.data[n].score,"</span></p>\n            ");t.innerHTML=e},t.prototype.hide=function(){document.getElementById("highscore-text").classList.remove("show")},t.prototype.sort=function(){this.data.sort((function(t,e){return t.score-e.score}))},t}(),ot=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();(new(function(t){function e(){var e=t.call(this,{tickSpeed:16.67})||this;return e.storedPiece=null,e.lastSwapped=null,e.totalLines=0,e}return ot(e,t),e.prototype.getNextPiece=function(){var t=this.nextPiece;return this.nextPiece=L(),t},e.prototype.eraseAll=function(){},e.prototype.initialize=function(){var t=this;this.getNextPiece=this.getNextPiece.bind(this),this.nextPiece=L(),H=document.getElementById("tetris"),K=document.getElementById("grid"),F=document.getElementById("highscore"),U=document.getElementById("highscore-form"),V=document.getElementById("highscore-submit"),z=document.getElementById("points"),q=document.getElementById("level"),Q=document.getElementById("lines"),J=document.getElementById("next-up-grid"),X=document.getElementById("holding-grid"),Y=document.getElementById("pause-btn"),Z=document.getElementById("target-btn"),$=document.getElementById("gameover-overlay"),tt=document.getElementById("try-again-btn");for(var e=0;e<20;++e)for(var n=0;n<10;++n){var o=document.createElement("div");o.id="r"+e+"c"+n,o.style.zIndex=""+e,K.appendChild(o)}for(e=0;e<25;++e)J.appendChild(document.createElement("div")),X.appendChild(document.createElement("div"));H.addEventListener("animationend",(function(t){var e=t.target;"small-grow"!==t.animationName&&"row-clear"!==t.animationName||e.classList.remove(t.animationName)})),X.addEventListener("click",(function(e){t.gameOver||t.isPaused||t.swapPiece()})),Y.addEventListener("click",(function(e){t.isPaused?(Y.children[0].className="fa-solid fa-pause",t.isPaused=!1):(Y.children[0].className="fa-solid fa-play",t.isPaused=!0)})),Z.addEventListener("click",(function(e){t.player.displayShadow=!t.player.displayShadow})),V.addEventListener("click",(function(e){if(t.gameOver&&U.classList.contains("show")){var n=document.querySelector("#highscore-form input");if(n){if(0!==n.value.length){var o=t.scores.scoreQualifies(t.score);t.scores.insertScore(t.score,n.value,o),t.scores.save(),U.classList.remove("show"),t.scores.show()}}else console.warn("Failed to get highscore input element!")}})),tt.addEventListener("click",(function(e){t.gameOver&&$.classList.contains("show")&&(t.scores.hide(),t.reset())}));var i=new N(20,10),r=new I(i,this.getNextPiece),s=new nt;return r.onPieceConnect.addListener((function(e){e.getTileEls().forEach((function(t){t.classList.remove("small-grow"),t.classList.add("small-grow")})),t.lastSwapped&&(t.lastSwapped=null)})),r.onReset.addListener((function(){t.drawNextPiece()})),r.onLineClear.addListener((function(e){4===e.length?t.score+=800*t.level:3===e.length?t.score+=400*t.level:2===e.length?t.score+=200*t.level:1===e.length&&(t.score+=100*t.level),t.totalLines+=e.length,t.level=Math.floor(t.totalLines/5)+1,r.speed=Math.max(r.startSpeed-50*t.level,r.maxSpeed)})),r.onLose.addListener((function(){t.gameOver=!0})),r.onMove.addListener((function(e,n){t.arrowDownCheck&&e>0&&++t.score,t.arrowDownCheck=!1})),i.onAnimEnd.addListener((function(e){if("line-clear"===e&&t.render(),"lose"===e){var n=t.scores.scoreQualifies(t.score);n>-1?(document.getElementById("highscore-description").innerText="You got #"+(t.scores.data.length-n).toString()+" place!",t.keyboard.allowDefault=!0,U.classList.add("show")):($.classList.add("show"),t.keyboard.allowDefault=!0)}})),this.player=r,this.grid=i,this.scores=s,this.reset(),!0},e.prototype.drawPiece=function(t,e){if(t){for(var n=e.children,o=0;o<25;++o)n[o].style.background="";for(var i=0;i<t.getHeight();++i)for(var r=0;r<t.getWidth();++r)n[5*(i+1)+r+1].style.background=A[t.get(i,r)].color}},e.prototype.drawNextPiece=function(){this.drawPiece(this.nextPiece,J)},e.prototype.drawHeldPiece=function(){this.drawPiece(this.storedPiece,X)},e.prototype.reset=function(){this.player.restart(),this.score=0,this.level=1,this.totalLines=0,this.grid.reset(),this.gameOver=!1,this.isPaused=!1,this.arrowDownCheck=!1,this.keyboard.allowDefault=!1,this.render()},e.prototype.update=function(t){var e=this.keyboard,n=this.player;e.justDown("KeyP")&&Y.click(),e.justDown("KeyT")&&Z.click(),this.gameOver&&e.justDown("KeyEnter")&&(U.classList.contains("show")&&V.click(),$.classList.contains("show")&&tt.click()),this.gameOver||this.isPaused||(e.isDown("ArrowDown")&&n.resetCounter(),e.justDown("KeyX")&&n.rotate(n.angle+1),e.justDown("KeyZ")&&n.rotate(n.angle-1),e.justDown("ArrowUp")&&(this.score+=n.immediateDrop()),e.justDown("KeyC")&&this.swapPiece(),e.isRepeating("ArrowLeft",100,65)&&n.move(0,-1),e.isRepeating("ArrowRight",100,65)&&n.move(0,1),e.isRepeating("ArrowDown",100,65)&&(n.moveDownOne(),this.arrowDownCheck=!0),n.update(t))},e.prototype.swapPiece=function(){if(this.lastSwapped!==this.player.piece){var t=this.storedPiece;this.lastSwapped=this.storedPiece,this.storedPiece=this.player.piece,this.player.reset(t),this.drawHeldPiece()}},e.prototype.render=function(){F.innerText=Math.max(this.scores.highestScore,this.score).toString(),z.innerText=this.score.toString(),q.innerText=this.level.toString(),Q.innerText=this.totalLines.toString();for(var t=K.children,e=0;e<20;++e)for(var n=0;n<10;++n){var o=10*e+n,i=this.grid.get(e,n);t[o].style.background=8===i?"rgba(0, 0, 0, 0.75)":A[i].color,t[o].style.boxShadow="",t[o].style.zIndex="1",t[o].style.opacity="1",t[o].style.border=""}this.player.render(t)},e}(x))).run()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,